resources:
  # Rule 1: Internet to Kong API Gateway
  - name: allow-internet-to-kong
    type: compute.v1.firewall
    properties:
      network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
      priority: 1000
      direction: INGRESS
      sourceRanges:
      - ${INTERFACE_2_KONG_API_GATEWAY}
      targetTags:
      - kong-api-gateway
      allowed:
      - IPProtocol: TCP
        ports:
        - ${PORT_DEFAULT_KONG_API_GATEWAY}
        - ${PORT_ADMIN_API_KONG_API_GATEWAY}
        - ${PORT_ADMIN_GUI_KONG_API_GATEWAY}

  # Rule 2: Kong API Gateway to Product Managers
  - name: allow-service-aggregators-a-to-product-managers
    type: compute.v1.firewall
    properties:
      network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
      priority: 1000
      direction: INGRESS
      sourceTags:
      - kong-api-gateway
      targetTags:
      - product-manager
      allowed:
      - IPProtocol: TCP
        ports:
        - ${PORT_PRODUCT_MANAGER}

  # Rule 3: Kong API Gateway to Log Managers
  - name: allow-service-aggregators-to-log-managers
    type: compute.v1.firewall
    properties:
      network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
      priority: 1000
      direction: INGRESS
      sourceTags:
      - kong-api-gateway
      targetTags:
      - log-manager
      allowed:
      - IPProtocol: TCP
        ports:
        - ${PORT_LOG_MANAGER}

  # Rule 4: Product Managers to Business Database
  - name: allow-product-managers-to-business-db
    type: compute.v1.firewall
    properties:
      network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
      priority: 1000
      direction: INGRESS
      sourceTags:
      - product-manager
      targetTags:
      - business-database
      allowed:
      - IPProtocol: TCP
        ports:
        - ${PORT_BUSINESS_DATABASE}

  # Rule 5: Log Managers to Log Database
  - name: allow-log-managers-to-log-db
    type: compute.v1.firewall
    properties:
      network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
      priority: 1000
      direction: INGRESS
      sourceTags:
      - log-manager
      targetTags:
      - log-database
      allowed:
      - IPProtocol: TCP
        ports:
        - ${PORT_LOG_DATABASE}
  
  # Database instance for Business Database
  - name: business-database-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_BUSINESS_DATABASE}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - business-database
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install -y postgresql postgresql-contrib
            sudo -u postgres psql -c "CREATE USER ${POSTGRESQL_DB_USER} WITH PASSWORD '${POSTGRESQL_DB_PASSWORD}';"
            sudo -u postgres createdb -O ${POSTGRESQL_DB_USER} ${POSTGRESQL_DB_NAME}
            echo "host all all ${INTERFACE_BUSINESS_DATABASE} trust" | sudo tee -a /etc/postgresql/12/main/pg_hba.conf
            echo "listen_addresses='${LISTEN_ADDR_BUSINESS_DATABASE}'" | sudo tee -a /etc/postgresql/12/main/postgresql.conf
            echo "max_connections=${MAX_CONN_BUSINESS_DATABASE}" | sudo tee -a /etc/postgresql/12/main/postgresql.conf
            sudo sed -i 's/local   all             all                                     peer/local   all             all                                     md5/' /etc/postgresql/12/main/pg_hba.conf
            sudo service postgresql restart
            echo "Done"

  # Database instance for Log Database
  - name: log-database-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_LOG_DATABASE}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - log-database
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            sudo apt update && sudo apt install -y influxdb
            sudo apt install influxdb-client
            sed -i 's/^  # bind-address.*/  bind-address = "${INTERFACE_LOG_DATABASE}:${PORT_LOG_DATABASE}"/' /etc/influxdb/influxdb.conf
            sed -i 's/^  # max-connection-limit.*/  max-connection-limit = ${MAX_CONN_LOG_DATABASE}/' /etc/influxdb/influxdb.conf
            sudo systemctl unmask influxdb.service
            sudo systemctl start influxdb
            sudo systemctl enable influxdb.service
            influx -execute 'CREATE DATABASE ${LOG_DB_NAME}'
            influx -execute "CREATE USER ${LOG_DB_USER} WITH PASSWORD '${LOG_DB_PASSWORD}'"
            influx -execute "GRANT ALL ON ${LOG_DB_NAME} TO ${LOG_DB_USER}"
            echo "Done"
  
  # Instance for Product Manager A
  - name: product-manager-a-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_PRODUCT_MANAGER_A}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - product-manager
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            cd ~
            echo 'export PRIVATE_IP_BUSINESS_DATABASE="${PRIVATE_IP_BUSINESS_DATABASE}"' >> ~/.profile
            echo 'export PORT_BUSINESS_DATABASE="${PORT_BUSINESS_DATABASE}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_NAME="${POSTGRESQL_DB_NAME}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_USER="${POSTGRESQL_DB_USER}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_PASSWORD="${POSTGRESQL_DB_PASSWORD}"' >> ~/.profile
            source ~/.profile
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt update
            sudo apt install python3.11 -y
            git init product_manager/
            cd product_manager/
            git remote add -f origin https://github.com/arquisoft-genesis-202401/sprint-2-final.git
            git config core.sparseCheckout true
            echo "requirements.txt" >> .git/info/sparse-checkout
            echo "product_manager/" >> .git/info/sparse-checkout
            git pull origin main 
            sed -i '/.*certifi.*/d' requirements.txt
            sed -i '/.*charset-normalizer.*/d' requirements.txt
            sed -i '/.*idna.*/d' requirements.txt
            sed -i '/.*requests.*/d' requirements.txt
            sed -i '/.*urllib3.*/d' requirements.txt
            python3.11 -m venv env --without-pip
            source env/bin/activate
            curl https://bootstrap.pypa.io/get-pip.py | python
            pip install -r requirements.txt
            cd product_manager/
            until nc -z ${PRIVATE_IP_BUSINESS_DATABASE} ${PORT_BUSINESS_DATABASE}; do
              echo "Waiting for business database to be reachable..."
              sleep 10
            done
            echo "Business database is up and running."
            python manage.py makemigrations product_manager
            python manage.py migrate product_manager
            python manage.py runserver ${INTERFACE_PRODUCT_MANAGER}:${PORT_PRODUCT_MANAGER}

  # Instance for Product Manager B
  - name: product-manager-b-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_PRODUCT_MANAGER_B}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - product-manager
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            cd ~
            echo 'export PRIVATE_IP_BUSINESS_DATABASE="${PRIVATE_IP_BUSINESS_DATABASE}"' >> ~/.profile
            echo 'export PORT_BUSINESS_DATABASE="${PORT_BUSINESS_DATABASE}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_NAME="${POSTGRESQL_DB_NAME}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_USER="${POSTGRESQL_DB_USER}"' >> ~/.profile
            echo 'export POSTGRESQL_DB_PASSWORD="${POSTGRESQL_DB_PASSWORD}"' >> ~/.profile
            source ~/.profile
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt update
            sudo apt install python3.11 -y
            git init product_manager/
            cd product_manager/
            git remote add -f origin https://github.com/arquisoft-genesis-202401/sprint-2-final.git
            git config core.sparseCheckout true
            echo "requirements.txt" >> .git/info/sparse-checkout
            echo "product_manager/" >> .git/info/sparse-checkout
            git pull origin main 
            sed -i '/.*certifi.*/d' requirements.txt
            sed -i '/.*charset-normalizer.*/d' requirements.txt
            sed -i '/.*idna.*/d' requirements.txt
            sed -i '/.*requests.*/d' requirements.txt
            sed -i '/.*urllib3.*/d' requirements.txt
            python3.11 -m venv env --without-pip
            source env/bin/activate
            curl https://bootstrap.pypa.io/get-pip.py | python
            pip install -r requirements.txt
            cd product_manager/
            until nc -z ${PRIVATE_IP_BUSINESS_DATABASE} ${PORT_BUSINESS_DATABASE}; do
              echo "Waiting for business database to be reachable..."
              sleep 10
            done
            echo "Business database is up and running."
            python manage.py makemigrations product_manager
            python manage.py migrate product_manager
            python manage.py runserver ${INTERFACE_PRODUCT_MANAGER}:${PORT_PRODUCT_MANAGER}

  # Instance for Log Manager A
  - name: log-manager-a-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_LOG_MANAGER_A}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - log-manager
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            cd ~
            echo 'export PRIVATE_IP_LOG_DATABASE="${PRIVATE_IP_LOG_DATABASE}"' >> ~/.profile
            echo 'export PORT_LOG_DATABASE="${PORT_LOG_DATABASE}"' >> ~/.profile
            echo 'export LOG_DB_NAME="${LOG_DB_NAME}"' >> ~/.profile
            echo 'export LOG_DB_USER="${LOG_DB_USER}"' >> ~/.profile
            echo 'export LOG_DB_PASSWORD="${LOG_DB_PASSWORD}"' >> ~/.profile
            source ~/.profile
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt update
            sudo apt install python3.11 -y
            git init log_manager/
            cd log_manager/
            git remote add -f origin https://github.com/arquisoft-genesis-202401/sprint-2-final.git
            git config core.sparseCheckout true
            echo "requirements.txt" >> .git/info/sparse-checkout
            echo "log_manager/" >> .git/info/sparse-checkout
            git pull origin main 
            sed -i '/.*psycopg2-binary.*/d' requirements.txt
            python3.11 -m venv env --without-pip
            source env/bin/activate
            curl https://bootstrap.pypa.io/get-pip.py | python
            pip install -r requirements.txt
            cd log_manager/
            until nc -z ${PRIVATE_IP_LOG_DATABASE} ${PORT_LOG_DATABASE}; do
              echo "Waiting for log database to be reachable..."
              sleep 10
            done
            echo "Log database is up and running."
            python manage.py runserver ${INTERFACE_LOG_MANAGER}:${PORT_LOG_MANAGER}

  # Instance for Log Manager B
  - name: log-manager-b-instance
    type: compute.v1.instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_LOG_MANAGER_B}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - log-manager
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            cd ~
            echo 'export PRIVATE_IP_LOG_DATABASE="${PRIVATE_IP_LOG_DATABASE}"' >> ~/.profile
            echo 'export PORT_LOG_DATABASE="${PORT_LOG_DATABASE}"' >> ~/.profile
            echo 'export LOG_DB_NAME="${LOG_DB_NAME}"' >> ~/.profile
            echo 'export LOG_DB_USER="${LOG_DB_USER}"' >> ~/.profile
            echo 'export LOG_DB_PASSWORD="${LOG_DB_PASSWORD}"' >> ~/.profile
            source ~/.profile
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt update
            sudo apt install python3.11 -y
            git init log_manager/
            cd log_manager/
            git remote add -f origin https://github.com/arquisoft-genesis-202401/sprint-2-final.git
            git config core.sparseCheckout true
            echo "requirements.txt" >> .git/info/sparse-checkout
            echo "log_manager/" >> .git/info/sparse-checkout
            git pull origin main 
            sed -i '/.*psycopg2-binary.*/d' requirements.txt
            python3.11 -m venv env --without-pip
            source env/bin/activate
            curl https://bootstrap.pypa.io/get-pip.py | python
            pip install -r requirements.txt
            cd log_manager/
            until nc -z ${PRIVATE_IP_LOG_DATABASE} ${PORT_LOG_DATABASE}; do
              echo "Waiting for log database to be reachable..."
              sleep 10
            done
            echo "Log database is up and running."
            python manage.py runserver ${INTERFACE_LOG_MANAGER}:${PORT_LOG_MANAGER}

  # Instance of Kong API Gateway
  - type: compute.v1.instance
    name: kong-api-gateway-instance
    properties:
      zone: us-central1-a
      machineType: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/zones/us-central1-a/machineTypes/e2-micro
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/${PROJECT_ID}/global/networks/default
        networkIP: ${PRIVATE_IP_KONG_API_GATEWAY}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      tags:
        items: 
        - kong-api-gateway
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            # TODO Service Aggregator
            echo 'export PRIVATE_IP_SERVICE_AGGREGATOR_A="${PRIVATE_IP_SERVICE_AGGREGATOR_A}"' >> ~/.profile
            echo 'export PRIVATE_IP_SERVICE_AGGREGATOR_B="${PRIVATE_IP_SERVICE_AGGREGATOR_B}"' >> ~/.profile
            echo 'export PORT_SERVICE_AGGREGATOR="${PORT_SERVICE_AGGREGATOR}"' >> ~/.profile
            #
            echo 'export PRIVATE_IP_PRODUCT_MANAGER_A="${RIVATE_IP_PRODUCT_MANAGER_A}"' >> ~/.profile
            echo 'export PRIVATE_IP_PRODUCT_MANAGER_B="${PRIVATE_IP_PRODUCT_MANAGER_B}"' >> ~/.profile
            echo 'export PORT_PRODUCT_MANAGER="${PORT_PRODUCT_MANAGER}"' >> ~/.profile
            echo 'export PRIVATE_IP_LOG_MANAGER_A="${PRIVATE_IP_LOG_MANAGER_A}"' >> ~/.profile
            echo 'export PRIVATE_IP_LOG_MANAGER_B="${PRIVATE_IP_LOG_MANAGER_B}"' >> ~/.profile
            echo 'export PORT_LOG_MANAGER="${PORT_LOG_MANAGER}"' >> ~/.profile
            source ~/.profile
            sudo apt-get update
            sudo apt-get install ca-certificates curl gnupg lsb-release -y
            sudo mkdir -m 0755 -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            #sudo groupadd docker
            sudo usermod -aG docker $USER
            newgrp docker
            docker --version
            sudo git init kong_api_gateway/
            cd kong_api_gateway/
            sudo git remote add -f origin https://github.com/arquisoft-genesis-202401/sprint-2-final.git
            sudo git config core.sparseCheckout true
            sudo echo "kong.yaml.template" >> .git/info/sparse-checkout
            sudo git pull origin main
            sudo envsubst < kong.yaml.template > kong.yml
            sudo docker network create kong-net
            sudo docker run -d --name kong --network=kong-net -v "$(pwd):/kong/declarative/" -e "KONG_DATABASE=off" -e "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml" -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" -e "KONG_PROXY_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_LISTEN=${INTERFACE_KONG_API_GATEWAY}:${PORT_ADMIN_API_KONG_API_GATEWAY}" -e "KONG_ADMIN_GUI_URL=http://localhost:${PORT_ADMIN_GUI_KONG_API_GATEWAY}" -p ${PORT_DEFAULT_KONG_API_GATEWAY}:${PORT_DEFAULT_KONG_API_GATEWAY} -p ${PORT_ADMIN_API_KONG_API_GATEWAY}:${PORT_ADMIN_API_KONG_API_GATEWAY} -p ${PORT_ADMIN_GUI_KONG_API_GATEWAY}:${PORT_ADMIN_GUI_KONG_API_GATEWAY} kong/kong-gateway:2.7.2.0-alpine
            docker ps

